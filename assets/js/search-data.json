{
  
    
        "post0": {
            "title": "Infection Rate vs Public Announcements and Events",
            "content": ". . . .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/12/20/_12_21_key_dates.html",
            "relUrl": "/jupyter/2020/12/20/_12_21_key_dates.html",
            "date": " • Dec 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Overview of Ontario's Covid-19 Spread",
            "content": "Ontario Covid-19 Cases to Date . Confirmed: 155,930 +2,316 (+1.51%) Resolved: 133,213 +1,931 (+1.47%) Active: 18,567 +360 (+1.98%) Deaths: 4,150 +25 (+0.61%) Current Death Rate: 2.66% Current Survival Rate: 97.34% Ontario data last updated: 2020-12-20, Refreshed on: 2020-12-20 at 21:53 Geographical Spread of Cases . . . Timeline of Cases . . . . . **Note that testing data is not available prior to April 15, 2020. Infection Rate vs Public Events &amp; Announcements . # todo: webscrape Canadian website for holidays and dates for automation public_events = [ {&quot;name&quot;: &quot;Easter Weekend&quot;, &quot;date&quot;: &quot;2020-04-10&quot;}, {&quot;name&quot;: &quot;Mother&#39;s Day&quot;, &quot;date&quot;: &quot;2020-05-10&quot;, &quot;ay&quot; : 60}, {&quot;name&quot;: &quot;Victoria Day&quot;, &quot;date&quot;: &quot;2020-05-18&quot;}, {&quot;name&quot;: &quot;Trinity Bellwoods&lt;br&gt;Park Weekend&quot;, &quot;date&quot;: &quot;2020-05-23&quot;, &quot;ay&quot;: -100, &quot;ax&quot;: 80}, {&quot;name&quot;: &quot;Father&#39;s Day&quot;, &quot;date&quot;: &quot;2020-06-21&quot;, &quot;ay&quot;: 40}, {&quot;name&quot;: &quot;Canada Day&quot;, &quot;date&quot;: &quot;2020-07-01&quot;}, {&quot;name&quot;: &quot;Civic Holiday&quot;, &quot;date&quot;: &quot;2020-08-03&quot;}, {&quot;name&quot;: &quot;Schools reopen&lt;br&gt;for 2020-21&quot;, &quot;date&quot;: &quot;2020-09-08&quot;}, {&quot;name&quot;: &quot;Thanksgiving&lt;br&gt;Weekend&quot;, &quot;date&quot;: &quot;2020-10-12&quot;, &quot;ax&quot;: -40, &quot;ay&quot;: -50}, {&quot;name&quot;: &quot;Halloween&quot;, &quot;date&quot;: &quot;2020-10-31&quot;, &quot;ax&quot;: -20}, {&quot;name&quot;: &quot;Diwali&quot;, &quot;date&quot;: &quot;2020-11-14&quot;, &quot;ax&quot;: -60, &quot;ay&quot;: -25}, {&quot;name&quot;: &quot;Black Friday&quot;, &quot;date&quot;: &quot;2020-11-27&quot;, &quot;ax&quot;: -20}, {&quot;name&quot;: &quot;Vaccine Rollout&quot;, &quot;date&quot;: &quot;2020-12-15&quot;} # {&quot;name&quot;: &quot;Christmas&quot;, &quot;date&quot;: &quot;2020-12-25&quot;}, # {&quot;name&quot;: &quot;Boxing Week&lt;br&gt; begins&quot;, &quot;date&quot;: &quot;2020-12-26&quot;}, # {&quot;name&quot;: &quot;New Year&#39;s Day&quot;, &quot;date&quot;: &quot;2021-01-01&quot;}, ] government_events = [ {&quot;name&quot;: &quot;Ontario Lockdown #1&quot;, &quot;date&quot;: &quot;2020-03-23&quot;,&quot;ax&quot;: -20, &quot;ay&quot;: -80}, #{&quot;name&quot;: &quot;Some regions enter stage 2&quot;, &quot;date&quot;: &quot;2020-06-08&quot;}, {&quot;name&quot;: &quot;Ontario in Stage 2&quot;, &quot;date&quot;: &quot;2020-06-24&quot;, &quot;ay&quot;: -40}, {&quot;name&quot;: &quot;Ontario in Stage 3&quot;, &quot;date&quot;: &quot;2020-07-31&quot;, &quot;ay&quot;: -30}, {&quot;name&quot;: &quot;Schools reopen&lt;br&gt;for 2020-21&quot;, &quot;date&quot;: &quot;2020-09-08&quot;, &quot;ax&quot;: -40, &quot;ay&quot;: -80}, {&quot;name&quot;: &quot;Second Wave confirmed&quot;, &quot;date&quot;: &quot;2020-09-28&quot;, &quot;ax&quot;: -40, &quot;ay&quot;: -80}, {&quot;name&quot;: &quot;Peel/Toronto/Ottawa&lt;br&gt;revert to&lt;br&gt;modified Stage 2&quot;, &quot;date&quot;: &quot;2020-10-12&quot;,&quot;ax&quot;:30, &quot;ay&quot;: 100}, {&quot;name&quot;: &quot;Peel/Ottawa&lt;br&gt;in Orange Zone&quot;, &quot;date&quot;: &quot;2020-11-07&quot;,&quot;ax&quot;: 25, &quot;ay&quot;: 60}, {&quot;name&quot;: &quot;Peel/Toronto&lt;br&gt;in Red Zone&quot;, &quot;date&quot;: &quot;2020-11-12&quot;, &quot;ax&quot;: -80, &quot;ay&quot;: -30}, {&quot;name&quot;: &quot;Halton in Red Zone&quot;, &quot;date&quot;: &quot;2020-11-16&quot;, &quot;ax&quot;: -50}, {&quot;name&quot;: &quot;Peel/Toronto in&lt;br&gt;Lockdown&lt;br&gt;#2&quot;, &quot;date&quot;: &quot;2020-11-23&quot;, &quot;ay&quot;: -80}, {&quot;name&quot;: &quot;York/Windsor&lt;br&gt;in Lockdown&lt;br&gt;#2&quot;, &quot;date&quot;: &quot;2020-12-14&quot;, &quot;ay&quot;: 80}, {&quot;name&quot;: &quot;Vaccine Rollout&quot;, &quot;date&quot;: &quot;2020-12-15&quot;} ] other_events = [ {&quot;name&quot;: &quot;GoodLife email request to lobby MPPs&quot;, &quot;date&quot;: &quot;2020-10-28&quot;}, ] # Sources: # https://www.peelschools.org/schools/reopening/Pages/default.aspx # https://globalnews.ca/news/6859636/ontario-coronavirus-timeline/ . # append events to an annotation dictionary public_dates_annot = [] for event in public_events: if event[&quot;date&quot;]: ax = event.get(&quot;ax&quot;) if ax is None: ax = 0 ay = event.get(&quot;ay&quot;) if ay is None: ay = -60 public_dates_annot.append(dict( x=event[&quot;date&quot;], y=df_testing[df_testing[&quot;Reported Date&quot;] == event[&quot;date&quot;]][&quot;New Cases 5 Day Average&quot;].values[0], xref=&quot;x&quot;, yref=&quot;y&quot;, text=event[&quot;name&quot;], showarrow=True, arrowhead=3, ax=ax, ay=ay )) government_dates_annot = [] for event in government_events: if event[&quot;date&quot;]: ax = event.get(&quot;ax&quot;) if ax is None: ax = 0 ay = event.get(&quot;ay&quot;) if ay is None: ay = -60 government_dates_annot.append(dict( x=event[&quot;date&quot;], y=df_testing[df_testing[&quot;Reported Date&quot;] == event[&quot;date&quot;]][&quot;New Cases 5 Day Average&quot;].values[0], xref=&quot;x&quot;, yref=&quot;y&quot;, text=event[&quot;name&quot;], showarrow=True, arrowhead=3, ax=ax, ay=ay )) government_dates_annot[0] . {&#39;arrowhead&#39;: 3, &#39;ax&#39;: -20, &#39;ay&#39;: -80, &#39;showarrow&#39;: True, &#39;text&#39;: &#39;Ontario Lockdown #1&#39;, &#39;x&#39;: &#39;2020-03-23&#39;, &#39;xref&#39;: &#39;x&#39;, &#39;y&#39;: 58.0, &#39;yref&#39;: &#39;y&#39;} . fig_public = go.Figure() fig_public.add_trace(go.Scatter(x=df_testing[&#39;Reported Date&#39;], y=df_testing[&#39;New Cases 5 Day Average&#39;], mode=&quot;lines&quot;, #line=dict(color=&quot;maroon&quot;, dash=&quot;dot&quot;), name=&#39;5d Rolling Avg&#39;, showlegend=True )) fig_public.update_layout(annotations=public_dates_annot, title=&quot;Infection Rate Compared to Key Public Events&quot;, template=&#39;ggplot2&#39;, width=1000, xaxis_title=&quot;Reported Date&quot;, yaxis_title=&quot;Confirmed Cases&quot;) fig_public.update_layout(legend=dict( orientation=&quot;h&quot;, yanchor=&quot;bottom&quot;, y=1.02, xanchor=&quot;right&quot;, x=1,)) . . . fig_gov = go.Figure() fig_gov.add_trace(go.Scatter(x=df_testing[&#39;Reported Date&#39;], y=df_testing[&#39;New Cases 5 Day Average&#39;], mode=&quot;lines&quot;, #line=dict(color=&quot;blue&quot;, dash=&quot;dot&quot;), showlegend=True, name=&#39;5d Rolling Avg&#39;, )) fig_gov.update_layout(annotations=government_dates_annot, title=&quot;Infection Rate Compared to Governement Announcements&quot;, template=&#39;seaborn&#39;, width=1000, xaxis_title=&quot;Reported Date&quot;, yaxis_title=&quot;Confirmed Cases&quot;,) fig_gov.update_layout(legend=dict( orientation=&quot;h&quot;, yanchor=&quot;bottom&quot;, y=1.02, xanchor=&quot;right&quot;, x=1,)) . . . Deaths . Overview of Fatalities by Age Group . df_deaths = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Fatal&#39;].groupby([&#39;Age_Group&#39;]).count()[&quot;Row_ID&quot;] .reset_index().iloc[:,[0,1]].rename(columns={&#39;Row_ID&#39;: &#39;Deaths&#39;}) df_res = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Resolved&#39;].groupby([&#39;Age_Group&#39;]).count()[&quot;Row_ID&quot;] .reset_index().iloc[:,[0,1]].rename(columns={&#39;Row_ID&#39;: &#39;Resolved&#39;}) df_nres = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Not Resolved&#39;].groupby([&#39;Age_Group&#39;]).count()[&quot;Row_ID&quot;] .reset_index().iloc[:,[0,1]].rename(columns={&#39;Row_ID&#39;: &#39;Not Resolved&#39;}) # merge dataframes together and clean up df_age = df_deaths.merge(df_res, on=&#39;Age_Group&#39;).merge(df_nres, on=&#39;Age_Group&#39;).replace(&#39;&lt;20&#39;, &#39;0-19&#39;) .rename(columns={&#39;Age_Group&#39;: &#39;Age Group&#39;}).sort_values(&#39;Age Group&#39;) del [df_deaths, df_res, df_nres] # include percentages df_age[&#39;Death Rate&#39;] = (df_age[&#39;Deaths&#39;] / (df_age[&#39;Resolved&#39;] + df_age[&#39;Not Resolved&#39;])) df_age[&#39;Survival Rate&#39;] = (1 - df_age[&#39;Death Rate&#39;]) x = df_age .drop(columns=[&#39;Resolved&#39;, &#39;Not Resolved&#39;]) .style.format({&quot;Death Rate&quot;: &quot;{:.2%}&quot;, &quot;Survival Rate&quot;: &quot;{:.2%}&quot;}) .background_gradient(cmap=&#39;Reds&#39;, subset=[&#39;Deaths&#39;, &#39;Death Rate&#39;]) .background_gradient(cmap=&#39;Greens&#39;, subset=[&#39;Survival Rate&#39;]) .hide_index() x.set_properties(**{&#39;text-align&#39;: &#39;center&#39;}).hide_index() . Age Group Deaths Death Rate Survival Rate . 0-19 | 1 | 0.01% | 99.99% | . 20s | 6 | 0.02% | 99.98% | . 30s | 10 | 0.04% | 99.96% | . 40s | 33 | 0.15% | 99.85% | . 50s | 134 | 0.60% | 99.40% | . 60s | 360 | 2.54% | 97.46% | . 70s | 733 | 10.32% | 89.68% | . 80s | 1515 | 26.55% | 73.45% | . 90s | 1358 | 41.16% | 58.84% | . df_deathts = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Fatal&#39;].groupby([&#39;Case_Reported_Date&#39;, &#39;Age_Group&#39;]).count()[&#39;Row_ID&#39;] .reset_index().rename(columns={&quot;Row_ID&quot;: &quot;Cases&quot;}) fig_deaths = px.bar(df_deathts, y=&#39;Cases&#39;, x=&#39;Case_Reported_Date&#39;, color=&#39;Age_Group&#39;, labels={&quot;Case_Reported_Date&quot; : &quot;Reported Date&quot;, &quot;Age_Group&quot; : &quot;Age Group&quot;, &quot;Cases&quot; : &quot;Deaths&quot;}, color_discrete_sequence=px.colors.qualitative.Set2, title = &quot;Ontario Covid-19 Deaths by Age Group&quot; ) fig_deaths.show() . . . def acquisition(acq): if acq == &#39;CC&#39;: return &#39;Close Contact&#39; elif acq == &#39;OB&#39;: return &#39;Institutional Outbreak&#39; elif acq == &#39;No known epi link&#39;: return &#39;Community Spread&#39; else: return acq df_cases = src_conpos.groupby([&#39;Reporting_PHU&#39;, &#39;Case_AcquisitionInfo&#39;]).count()[&#39;Row_ID&#39;].reset_index() .rename(columns={&#39;Row_ID&#39;: &#39;Cases&#39;}) # df_cases[&#39;Acquisition&#39;] = df_cases[&#39;Case_AcquisitionInfo&#39;].apply(aquisition) df_cases[&#39;Acquisition&#39;] = df_cases.apply(lambda x: acquisition(x[&#39;Case_AcquisitionInfo&#39;]), axis=1) df_phucount = src_conpos.groupby([&#39;Reporting_PHU&#39;]).count()[&#39;Row_ID&#39;].reset_index().rename(columns={&#39;Row_ID&#39;: &#39;Total&#39;}) df_cases = pd.merge(df_cases, df_phucount, how=&#39;left&#39;, on=&#39;Reporting_PHU&#39;) df_cases[&#39;Reporting_PHU&#39;] = df_cases[&#39;Reporting_PHU&#39;].str.replace(&#39; Public Health&#39;, &#39;&#39;).str.replace(&#39; Health Unit&#39;, &#39;&#39;) .str.replace(&#39; Unit&#39;, &#39;&#39;).str.replace(&#39;,&#39;, &#39;&#39;) df_cases = df_cases.sort_values([&#39;Total&#39;, &#39;Acquisition&#39;], ascending=[True, True]).reset_index(drop=True) df_cases.head() . Reporting_PHU Case_AcquisitionInfo Cases Acquisition Total . 0 Timiskaming | CC | 16 | Close Contact | 37 | . 1 Timiskaming | OB | 8 | Institutional Outbreak | 37 | . 2 Timiskaming | MISSING INFORMATION | 7 | MISSING INFORMATION | 37 | . 3 Timiskaming | NO KNOWN EPI LINK | 6 | NO KNOWN EPI LINK | 37 | . 4 Algoma | CC | 20 | Close Contact | 62 | . fig_phucases = px.bar(df_cases, y=&#39;Reporting_PHU&#39;, x=&#39;Cases&#39;, color=&#39;Acquisition&#39;, orientation=&#39;h&#39;, #color_discrete_sequence=px.colors.qualitative.Vivid, height=800, title=&#39;Breakdown of Cases per Region&#39;, labels={&quot;Total&quot; : &quot;Confirmed Cases&quot;, &quot;Reporting_PHU&quot; : &quot;Region&quot;, &quot;Acquisition&quot;: &quot;Link&quot;}, template=&#39;seaborn&#39; ) fig_phucases.show() . . .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/12/20/_12_20_Ontario_Overview.html",
            "relUrl": "/jupyter/2020/12/20/_12_20_Ontario_Overview.html",
            "date": " • Dec 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vijay-ss.github.io/covid19-blogpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vijay-ss.github.io/covid19-blogpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vijay-ss.github.io/covid19-blogpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}