{
  
    
        "post0": {
            "title": "Covid-19 Death Rates",
            "content": "import pandas as pd import plotly.graph_objects as go import plotly.express as px import altair as alt from IPython.display import HTML, display import pytz import ipywidgets as widgets from datetime import datetime, timedelta, timezone print(&#39;Libraries successfully imported.&#39;) . Libraries successfully imported. . url = &#39;https://data.ontario.ca/dataset/f4112442-bdc8-45d2-be3c-12efae72fb27/resource/455fd63b-603d-4608-8216-7d8647f43350/download/conposcovidloc.csv&#39; url_2 = &#39;https://data.ontario.ca/dataset/f4f86e54-872d-43f8-8a86-3892fd3cb5e6/resource/ed270bb8-340b-41f9-a7c6-e8ef587e6d11/download/covidtesting.csv&#39; url_3 = &#39;https://data.ontario.ca/dataset/f4f86e54-872d-43f8-8a86-3892fd3cb5e6/resource/8a88fe6d-d8fb-41a3-9d04-f0550a44999f/download/daily_change_in_cases_by_phu.csv&#39; src_conpos = pd.read_csv(url, index_col=0, parse_dates=[&#39;Accurate_Episode_Date&#39;, &#39;Case_Reported_Date&#39;, &#39;Test_Reported_Date&#39;, &#39;Specimen_Date&#39;]).reset_index() src_testing = pd.read_csv(url_2, index_col=0, parse_dates=[&#39;Reported Date&#39;]).reset_index() src_daily = pd.read_csv(url_3, index_col=0, parse_dates=[&#39;Date&#39;]).reset_index() # duplicate entry for December 5th, 2020 causing error src_testing.drop_duplicates(inplace=True) print(&#39;Source files successfully loaded.&#39;) . Source files successfully loaded. . df_deathts = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Fatal&#39;].groupby([&#39;Case_Reported_Date&#39;, &#39;Age_Group&#39;]).count()[&#39;Row_ID&#39;] .reset_index().rename(columns={&quot;Row_ID&quot;: &quot;Cases&quot;}) fig_deaths = px.bar(df_deathts, y=&#39;Cases&#39;, x=&#39;Case_Reported_Date&#39;, color=&#39;Age_Group&#39;, labels={&quot;Case_Reported_Date&quot; : &quot;Reported Date&quot;, &quot;Age_Group&quot; : &quot;Age Group&quot;, &quot;Cases&quot; : &quot;Deaths&quot;}, color_discrete_sequence=px.colors.qualitative.Set2, title = &quot;Ontario Covid-19 Deaths by Age Group&quot; ) fig_deaths.show() . . . df_deaths = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Fatal&#39;].groupby([&#39;Age_Group&#39;]).count()[&quot;Row_ID&quot;] .reset_index().iloc[:,[0,1]].rename(columns={&#39;Row_ID&#39;: &#39;Deaths&#39;}) df_res = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Resolved&#39;].groupby([&#39;Age_Group&#39;]).count()[&quot;Row_ID&quot;] .reset_index().iloc[:,[0,1]].rename(columns={&#39;Row_ID&#39;: &#39;Resolved&#39;}) df_nres = src_conpos[src_conpos[&#39;Outcome1&#39;] == &#39;Not Resolved&#39;].groupby([&#39;Age_Group&#39;]).count()[&quot;Row_ID&quot;] .reset_index().iloc[:,[0,1]].rename(columns={&#39;Row_ID&#39;: &#39;Not Resolved&#39;}) # merge dataframes together and clean up df_age = df_deaths.merge(df_res, on=&#39;Age_Group&#39;).merge(df_nres, on=&#39;Age_Group&#39;).replace(&#39;&lt;20&#39;, &#39;0-19&#39;) .rename(columns={&#39;Age_Group&#39;: &#39;Age Group&#39;}).sort_values(&#39;Age Group&#39;) del [df_deaths, df_res, df_nres] # include percentages df_age[&#39;Death Rate&#39;] = (df_age[&#39;Deaths&#39;] / (df_age[&#39;Resolved&#39;] + df_age[&#39;Not Resolved&#39;])) df_age[&#39;Survival Rate&#39;] = (1 - df_age[&#39;Death Rate&#39;]) x = df_age .drop(columns=[&#39;Resolved&#39;, &#39;Not Resolved&#39;]) .style.format({&quot;Death Rate&quot;: &quot;{:.2%}&quot;, &quot;Survival Rate&quot;: &quot;{:.2%}&quot;}) .background_gradient(cmap=&#39;Reds&#39;, subset=[&#39;Deaths&#39;, &#39;Death Rate&#39;]) .background_gradient(cmap=&#39;Greens&#39;, subset=[&#39;Survival Rate&#39;]) .hide_index() x.set_properties(**{&#39;text-align&#39;: &#39;center&#39;}).hide_index() . Age Group Deaths Death Rate Survival Rate . 0-19 | 1 | 0.00% | 100.00% | . 20s | 6 | 0.02% | 99.98% | . 30s | 11 | 0.04% | 99.96% | . 40s | 33 | 0.15% | 99.85% | . 50s | 134 | 0.58% | 99.42% | . 60s | 362 | 2.49% | 97.51% | . 70s | 745 | 10.18% | 89.82% | . 80s | 1529 | 26.04% | 73.96% | . 90s | 1367 | 40.48% | 59.52% | .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/fastpages/jupyter/2020/12/22/_12_22_Deaths_Ont.html",
            "relUrl": "/fastpages/jupyter/2020/12/22/_12_22_Deaths_Ont.html",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Infection Rate vs Public Announcements and Events",
            "content": ". . . .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/12/22/_12_21_key_dates.html",
            "relUrl": "/jupyter/2020/12/22/_12_21_key_dates.html",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Overview of Ontario's Covid-19 Spread",
            "content": "Ontario Covid-19 Cases to Date . Confirmed: 155,930 +2,316 (+1.51%) Resolved: 133,213 +1,931 (+1.47%) Active: 18,567 +360 (+1.98%) Deaths: 4,150 +25 (+0.61%) Current Death Rate: 2.66% Current Survival Rate: 97.34% Ontario data last updated: 2020-12-20, Refreshed on: 2020-12-20 at 23:16 Geographical Spread of Cases . . . Timeline of Cases . . . . . **Note that testing data is not available prior to April 15, 2020.",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/12/22/_12_20_Ontario_Overview.html",
            "relUrl": "/jupyter/2020/12/22/_12_20_Ontario_Overview.html",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Investigating Ontario's Covid-19 Spread",
            "content": "Ontario Covid-19 Cases to Date . Confirmed: 160,255 +2,202 (+1.39%) Resolved: 136,767 +1,900 (+1.41%) Active: 19,300 +281 (+1.48%) Deaths: 4,188 +21 (+0.50%) Current Death Rate: 2.61% Current Survival Rate: 97.39% Ontario data last updated: 2020-12-22, Refreshed on: 2020-12-22 at 21:22 Geographical Spread of Cases . . . Timeline of Cases . . . . . **Note that testing data is not available prior to April 15, 2020. Infection Rate Compared to Notable Public Events &amp; Announcements . . . . . Deaths . Overview of Fatalities by Age Group . Age Group Deaths Death Rate Survival Rate . 0-19 | 1 | 0.00% | 100.00% | . 20s | 6 | 0.02% | 99.98% | . 30s | 11 | 0.04% | 99.96% | . 40s | 33 | 0.15% | 99.85% | . 50s | 134 | 0.58% | 99.42% | . 60s | 362 | 2.49% | 97.51% | . 70s | 745 | 10.18% | 89.82% | . 80s | 1529 | 26.04% | 73.96% | . 90s | 1367 | 40.48% | 59.52% | . . . . . df_phu = src_daily.drop(columns=[&#39;Total&#39;]).melt(id_vars=&#39;Date&#39;, value_name=&#39;Confirmed&#39;) .rename(columns={&quot;variable&quot; : &quot;Public_Health_Unit&quot;}) .fillna(0).sort_values([&#39;Date&#39;]).reset_index(drop=True) df_phu.head() . Date Public_Health_Unit Confirmed . 0 2020-03-24 | Algoma_Public_Health_Unit | 0.0 | . 1 2020-03-24 | Windsor-Essex_County_Health_Unit | 0.0 | . 2 2020-03-24 | Huron_Perth_District_Health_Unit | 0.0 | . 3 2020-03-24 | Haldimand-Norfolk_Health_Unit | 0.0 | . 4 2020-03-24 | Renfrew_County_and_District_Health_Unit | 0.0 | . df_phu[df_phu[&#39;Date&#39;] == df_phu[&#39;Date&#39;].max()].sort_values([&#39;Public_Health_Unit&#39;]).sort_values(&#39;Confirmed&#39;, ascending=False).reset_index(drop=True).head(10) . Date Public_Health_Unit Confirmed . 0 2020-12-22 | Toronto_Public_Health | 636.0 | . 1 2020-12-22 | Peel_Public_Health | 504.0 | . 2 2020-12-22 | York_Region_Public_Health_Services | 218.0 | . 3 2020-12-22 | Windsor-Essex_County_Health_Unit | 172.0 | . 4 2020-12-22 | Region_of_Waterloo,_Public_Health | 101.0 | . 5 2020-12-22 | Hamilton_Public_Health_Services | 95.0 | . 6 2020-12-22 | Middlesex-London_Health_Unit | 93.0 | . 7 2020-12-22 | Durham_Region_Health_Department | 86.0 | . 8 2020-12-22 | Halton_Region_Health_Department | 48.0 | . 9 2020-12-22 | Simcoe_Muskoka_District_Health_Unit | 46.0 | . import warnings warnings.filterwarnings(&quot;ignore&quot;) ontario = df_phu.groupby([&#39;Date&#39;])[&#39;Confirmed&#39;].sum().reset_index() toronto = df_phu[df_phu[&#39;Public_Health_Unit&#39;].isin([&#39;Toronto_Public_Health&#39;])] peel = df_phu[df_phu[&#39;Public_Health_Unit&#39;].isin([&#39;Peel_Public_Health&#39;])] york = df_phu[df_phu[&#39;Public_Health_Unit&#39;].isin([&#39;York_Region_Public_Health_Services&#39;])] halton = df_phu[df_phu[&#39;Public_Health_Unit&#39;].isin([&#39;Halton_Region_Health_Department&#39;])] toronto[&#39;Rolling 7d&#39;] = toronto[&#39;Confirmed&#39;].rolling(7).mean() peel[&#39;Rolling 7d&#39;] = peel[&#39;Confirmed&#39;].rolling(7).mean() york[&#39;Rolling 7d&#39;] = york[&#39;Confirmed&#39;].rolling(7).mean() halton[&#39;Rolling 7d&#39;] = halton[&#39;Confirmed&#39;].rolling(7).mean() ontario[&#39;Rolling 7d&#39;] = ontario[&#39;Confirmed&#39;].rolling(7).mean() . fig_hot = px.line(width=1000, template=&#39;seaborn&#39; ) fig_hot.add_trace(go.Scatter( x=ontario[&#39;Date&#39;], y=ontario[&#39;Rolling 7d&#39;], mode=&#39;lines&#39;, name=&#39;Ontario Overall&#39;, line=dict(color=&quot;black&quot;, dash=&quot;dot&quot;) )) fig_hot.add_trace(go.Scatter( x=toronto[&#39;Date&#39;], y=toronto[&#39;Rolling 7d&#39;], mode=&#39;lines&#39;, name=&#39;Toronto&#39;, #line=dict(color=&quot;yellow&quot;, dash=&quot;solid&quot;) )) fig_hot.add_trace(go.Scatter( x=peel[&#39;Date&#39;], y=peel[&#39;Rolling 7d&#39;], mode=&#39;lines&#39;, name=&#39;Peel&#39;, #line=dict(color=&quot;red&quot;, dash=&quot;solid&quot;) )) fig_hot.add_trace(go.Scatter( x=halton[&#39;Date&#39;], y=halton[&#39;Rolling 7d&#39;], mode=&#39;lines&#39;, name=&#39;Halton&#39;, #line=dict(color=&quot;orange&quot;, dash=&quot;solid&quot;) )) fig_hot.add_trace(go.Scatter( x=york[&#39;Date&#39;], y=york[&#39;Rolling 7d&#39;], mode=&#39;lines&#39;, name=&#39;York&#39;, #line=dict(color=&quot;green&quot;, dash=&quot;solid&quot;) )) fig_hot.update_layout(title=&#39;Confirmed Cases for Ontario Covid-19 Hotspots&#39;, xaxis_title=&#39;Date&#39;, yaxis_title=&#39;Cases - 7d Rolling Avg&#39;) . . .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/12/22/_12_19_covid19_ontario_ORIG.html",
            "relUrl": "/jupyter/2020/12/22/_12_19_covid19_ontario_ORIG.html",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vijay-ss.github.io/covid19-blogpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vijay-ss.github.io/covid19-blogpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vijay-ss.github.io/covid19-blogpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vijay-ss.github.io/covid19-blogpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}